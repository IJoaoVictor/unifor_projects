A lógica por trás da função cifrar_mensagem, que é responsável por cifrar uma mensagem 
utilizando o método de cifragem de Vigenère com uma chave fornecida.

    Lógica Detalhada:
      Inicialização de Variáveis: 
      A função começa inicializando uma lista vazia para armazenar a mensagem cifrada.
    
    Repetição da Chave:
    
      A chave fornecida precisa ser repetida para cobrir toda a extensão da mensagem que será cifrada. 
      Isso é feito para garantir que cada letra da mensagem tenha um caractere correspondente na chave para determinar o deslocamento apropriado.
    
    Iteração pela Mensagem:
    
      A função itera sobre cada letra da mensagem original.
    
    Determinação da Letra da Chave Correspondente:
    
      Para cada letra da mensagem, é determinada a letra correspondente na chave repetida.
      Essa correspondência é feita pela posição relativa da letra na mensagem em relação à repetição da chave. 
      
      Por exemplo, a primeira letra da mensagem corresponde à primeira letra da chave repetida, 
      a segunda letra da mensagem corresponde à segunda letra da chave repetida e assim por diante.
    
    Cifragem da Letra:
    
      Com a letra correspondente da chave determinada, é calculado o deslocamento necessário para cifrar a letra da mensagem.
    
      Isso é feito encontrando a posição da letra da chave no alfabeto e usando essa posição
      como índice para encontrar a letra cifrada na tabela de Vigenère.
    
      A letra cifrada é então adicionada à lista de mensagem cifrada.
    
    Preservação de Caracteres Não Alfabéticos:
    
      Se a letra da mensagem não estiver no alfabeto (por exemplo, caracteres de pontuação ou espaços), 
      ela é mantida na mensagem cifrada sem modificação.
      
    Retorno da Mensagem Cifrada:
    
    Após iterar por todas as letras da mensagem original, a lista de letras cifradas é concatenada em uma única string, 
    que é então retornada como a mensagem cifrada completa.
    
    Exemplo Prático:
      Suponha que temos a seguinte mensagem original e uma chave para cifragem:
    
        Mensagem Original: "PROJETO"
        Chave: "SEG"
        A chave será repetida para cobrir toda a mensagem:
        
        Chave Repetida: "SEGSEGSE"
        Para cada letra da mensagem original, determinamos a letra correspondente na chave repetida:
        
        P corresponde a S
        R corresponde a E
        O corresponde a G
        J corresponde a S
        E corresponde a E
        T corresponde a G
        O corresponde a S
    
        Para cada letra da mensagem original, determinamos o deslocamento necessário para cifrar a letra:
        
        P com deslocamento de S para encontrar a letra cifrada correspondente na tabela de Vigenère.
        R com deslocamento de E para encontrar a letra cifrada correspondente na tabela de Vigenère.
        O com deslocamento de G para encontrar a letra cifrada correspondente na tabela de Vigenère.
        J com deslocamento de S para encontrar a letra cifrada correspondente na tabela de Vigenère.
        E com deslocamento de E para encontrar a letra cifrada correspondente na tabela de Vigenère.
        T com deslocamento de G para encontrar a letra cifrada correspondente na tabela de Vigenère.
        O com deslocamento de S para encontrar a letra cifrada correspondente na tabela de Vigenère.
        A mensagem cifrada resultante seria a concatenação dessas letras cifradas.


Repetição Inteira da Chave:

(chave * (len(mensagem) // len(chave))): Essa parte da expressão calcula quantas vezes a chave deve ser repetida inteiramente para cobrir o comprimento total da mensagem.

len(mensagem): Retorna o comprimento da mensagem.

len(chave): Retorna o comprimento da chave.

len(mensagem) // len(chave): Calcula quantas vezes a chave cabe inteiramente na mensagem.

chave * (len(mensagem) // len(chave)): Repete a chave a quantidade de vezes calculada.

Adição da Parte Restante da Chave:

+ chave[:len(mensagem) % len(chave)]: Esta parte da expressão adiciona a parte restante da chave que não foi coberta pela repetição inteira.
l
en(mensagem) % len(chave): Calcula o resto da divisão do comprimento da mensagem pelo comprimento da chave. Isso indica quantos caracteres adicionais são necessários para completar a chave.

chave[:len(mensagem) % len(chave)]: Retorna os primeiros caracteres da chave até o número calculado de caracteres adicionais.

Concatenação das Partes:

chave_repetida = (chave * (len(mensagem) // len(chave))) + chave[:len(mensagem) % len(chave)]: Por fim, as duas partes são concatenadas para formar a chave repetida.

Exemplo Prático:
Vamos usar um exemplo simples para demonstrar como essa expressão funciona:

Mensagem: "ABCDE"
Chave: "KEY"
Repetição Inteira da Chave:

(chave * (len(mensagem) // len(chave)))
len(mensagem) // len(chave): 5 // 3 = 1 (a chave cabe completamente uma vez na mensagem)
chave * (len(mensagem) // len(chave)): "KEY"
Adição da Parte Restante da Chave:

+ chave[:len(mensagem) % len(chave)]
len(mensagem) % len(chave): 5 % 3 = 2 (precisamos de mais 2 caracteres)
chave[:len(mensagem) % len(chave)]: "KE"
Concatenação das Partes:

chave_repetida = "KEY" + "KE" = "KEYKE"
Portanto, a chave repetida será "KEYKE", que tem o mesmo comprimento da mensagem "ABCDE".
